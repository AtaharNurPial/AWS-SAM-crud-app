AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  crud-app

  Sample SAM Template for crud-app

Globals:
  Function:
    Timeout: 30
    Runtime: python3.8
    Architectures:
      - x86_64

Parameters:
  # Region:
  #   Type: String
  #   Default: us-east-2
  # AWSEnv:
  #   Type: String
  #   Default: AWS  
  Table:
    Type: String
    Default: Activities

Resources:
  CreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/Create-function/
      Handler: app.lambda_handler   
      Environment:  
        Variables:
          TABLE: !Ref Table
          # REGION: !Ref Region
          # AWSENV: !Ref AWSEnv
      Events:
        CreateOperation:
          Type: Api
          Properties:
            Path:  /activities
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
        - SQSSendMessagePolicy:
            QueueName: !Ref RawQueuePolicy

  ReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/Read-function/
      Handler: app.lambda_handler     
      Environment:  
        Variables:
          TABLE: !Ref Table
          # REGION: !Ref Region
          # AWSENV: !Ref AWSEnv
      Events:
        CreateOperation:
          Type: Api
          Properties:
            Path:  /activities/{id}
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable
        - SQSSendMessagePolicy:
            QueueName: !Ref RawQueuePolicy

  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/Update-function/
      Handler: app.lambda_handler     
      Environment:  
        Variables:
          TABLE: !Ref Table
          # REGION: !Ref Region
          # AWSENV: !Ref AWSEnv
      Events:
        CreateOperation:
          Type: Api
          Properties:
            Path:  /activities/{id}
            Method: put
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/Delete-function/
      Handler: app.lambda_handler   
      Environment:  
        Variables:
          TABLE: !Ref Table
          # REGION: !Ref Region
          # AWSENV: !Ref AWSEnv
      Events:
        CreateOperation:
          Type: Api
          Properties:
            Path:  /activities/{id}/{date}
            Method: delete
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ActivitiesTable

  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/Trigger-function/
      Handler: app.lambda_handler
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RawQueue.Arn
            BatchSize: 10
            Enabled: true
      Policies:
      - SQSPollerPolicy:
          QueueName: !Ref RawQueuePolicy

  ActivitiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
        -
          AttributeName: "date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Activities"

  DeadLetter:
    Type: AWS::SQS::Queue

  RawQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 10
      # MessageRetentionPerion: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetter.Arn
        maxReceiveCount: 4
      # Tags:
      #   - Key: Practice
      #   Value: SQS
      VisibilityTimeout: 120

  RawQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - !Ref RawQueue
      PolicyDocument:
        Id: RawQueuePolicy
        Version: '2012-10-17'
        Statement:
        - Sid: Allow-User-SendMessage
          Effect: Allow
          Action:
            'SQS:*'
          # - SQS:SendMessage
          # - SQS:ReceiveMessage
          # Resource: !GetAtt RawQueue.Arn
          Resource: '*'

Outputs:
  CreateFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Create function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/activities/"
  ReadFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Read function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/activities/{id}"
  UpdateFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Update function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/activities/{id}"
  DeleteFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/activities/{id}/{date}"

  RawSqsUrl:
    Description: URL of the sqs event
    Value: !Ref RawQueue
